1. Which classes are aggregates of other classes?
*) CompactDisc is aggregate of Track
*) Store is aggregate of Media
*) Cart is aggregation of Media

2. When overriding the equals() method of the Object class, you will have to cast the Object parameter obj to the type of
   Object that you are dealing with. For example, in the Media class, you must cast the Object obj to a Media, and then check the
   equality of the two objectsâ€™ attributes as the above requirements (i.e. title for Media; title and length for Track). If the
   passing object is not an instance of Media, what happens?
=> The equals() method will return false

3. Iterate through the list and print out the information of the media by using toString() method. Observe
   what happens and explain in detail.
=> Since java is default of dynamic binding, toString() method will display what dependent on the type of media.

4. What class should implement the Comparable interface?
=> Class Media should implement the Comparable iterface

5. In those classes, how should you implement the compareTo() method be to reflect the ordering that we want?
=> We have to sort by the ordering that we need so equal or not equal is not enough. We need a method to compare in which we can know that an object is greater, less or equal
than the other. Therefore, equals(Object A, Object B) method should return 1 if  A >  B, -1 if A < B and 0 if A = B.

6. Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this Comparable interface approach?
=> Yes, it is possible to define two ordering rules for items using the Comparable interface approach. The Comparable interface in Java allows you to define a natural ordering
 for objects of a class. By implementing this interface and overriding the compareTo() method, you can specify how objects should be compared and ordered.

7. Suppose the DVDs has a different ordering rule from the other media types, that is by title, then decreasing length, then cost. How would you modify your code to allow
 this?
=> I think override method will be used in this case.